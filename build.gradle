apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'

sourceCompatibility = 1.5
version = '1.0'

repositories {
    mavenCentral()
}

jar {
    manifest {
        attributes(
            'Implementation-Title': 'Speakingfish common pipe utilities',
            'Implementation-Version': version
        )
    }
}
    
sourceSets {
    main {
        java {
            srcDir 'src'
        }
    }
}

task loggerJar(dependsOn: classes, type: Jar) {
    classifier = 'logger'
    exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA', 'META-INF/*.MF'
    
    manifest {
        attributes(
            'Implementation-Title': 'Speakingfish common pipe utilities - Logger',
            'Implementation-Version': version,
            'Main-Class': 'com.speakingfish.pipe.util.Logger'
        )
    }
    from {
        (configurations.runtime.files + file('build/libs/java-sf-pipe-common-' + version + '.jar')).collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task wrapJar(dependsOn: classes, type: Jar) {
    classifier = 'wrap'
    exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA', 'META-INF/*.MF'
    
    manifest {
        attributes(
            'Implementation-Title': 'Speakingfish common pipe utilities - Wrap',
            'Implementation-Version': version,
            'Main-Class': 'com.speakingfish.pipe.util.Wrap'
        )
    }
    from {
        (configurations.runtime.files + file('build/libs/java-sf-pipe-common-' + version + '.jar')).collect { it.isDirectory() ? it : zipTree(it) }
    }
}

//subprojects {
//    compile project('logger')
//}

artifacts {
    archives loggerJar
}

dependencies {
    compile project(':java-sf-common-compatibility')
    compile project(':java-sf-common-function')
    compile project(':java-sf-common')
    compile project(':java-sf-common-closeable')
    compile project(':java-sf-common-value')
    compile project(':java-sf-common-value-util')
    compile project(':java-sf-wrapped-exception')
    testCompile group: 'junit', name: 'junit', version: '4.+'
}
